// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Types {
  shirts
  pants
  hoodies
  hats
}



enum Gender {
  men
  women
  kid
  unisex
  non_specified
}

enum Sizes {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

model Product {
  id Int @id @default(autoincrement())
  description String?
  images String[]
  inStock Int @default(0)
  sizes Sizes[]

  price Float @default(0)
  slug String @unique
  tags String[]
  title String

  ProductType ProductType @relation( fields: [type], references: [Type] )
  type String

  GenderTab Genders @relation( fields: [gender], references: [gender] )
  gender String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  //  Relaciones


}

model ProductType {
  idType Int @id @default(autoincrement())
  Type String @unique
  Productos Product[]
}

model Genders {
  idGender Int @id @default(autoincrement())
  gender String @unique

  Productos Product[]
  // OrderItem OrderItems[]
}


// Usuarios

model User {
  idUser Int @id @default(autoincrement())
  name String
  email String @unique
  password String

  Role Role @relation(fields: [role], references: [idRole])
  role Int @default(0)

  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relaciones
  Order Order[]
}

model Role {
  idRole Int @id @default(autoincrement())
  roleName String
  UserRole User[]
}



model Order {

  id String @id @default(uuid())
  
  //  Relaciones a Tablas User OrderItems y ShippingAddress
  User User @relation( fields: [user], references: [idUser] )
  user Int 

  // ShippingAddress OrderShippingAddress @relation(fields: [shippingAddress], references: [idShippingAddress])
  shippingAddress Json
  
  // OrderItems OrderItems @relation(fields: [orderItems], references: [idItem])
  orderItems Json[] 

  // Campos
  numberOfItems Int
  subTotal Float 
  tax Float
  total Float
  isPaid Boolean
  paidAt String?
  transactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model OrderShippingAddress {

//   idShippingAddress Int @id @default(autoincrement())

//   firstName String
//   lastName String
//   address String
//   address2 String?
//   zip String
//   city String
//   country String
//   phone String

//   //  Relaciones
//   // Order Order[]
// }




// No Usar
// model OrderItems {

//   idItem Int @id @default(autoincrement())

//   title String
//   size String
//   quantity String
//   slug String
//   image String
//   price Float
  
//   //  Relaciones
//   Gender Genders @relation( fields: [gender], references: [gender] )
//   gender String

//   Order Order[]
// }




